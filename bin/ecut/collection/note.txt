
java.lang.Iterable<T> : 实现这个接口允许对象成为 "foreach" 语句的目标
     |     |方法
     |     |------- Iterator<T> iterator() 返回一个在一组 T 类型的元素上进行迭代的迭代器
     |子类
     |
     |--- java.util.Collection<E> Collection 层次结构 中的根接口。
     |                  |                   Collection 表示一组对象，这些对象也称为 collection 的元素
     |                  |
     |                  |
     |                  |子类
     |                  |-------- java.util.List<E>
     |                  |                       |
     |                  |                       |------- java.util.ArrayList<E>实现类
     |                  |                       |------- java.util.LinkedList<E>实现类
     |                  |                       |------- java.util.Vector<E>实现类
     |                  |                       |                          |子类
     |                  |                       |                          |------- java.util.Stack<E>
     |                  |子类
     |                  |-------- java.util.Queue<E>
     |                  |                       |子类
     |                  |                       |------ java.util.Deque<E>
     |                  |                       |                    |实现类
     |                  |                       |                    |---- java.util.LinkedList<E>
     |                  | 
     |                  | 子类
     |                  |-------- java.util.Set<E>
     |                  |                       |------- java.util.HashSet<E>实现类
     |                  |                       |------- java.util.TreeSet<E>
     |                  |                       |NavigableSet<E>的实现类，NavigableSet<E>继承SortedSet<E>，SortedSet<E>继承Set<E>
     |                  |                       |------- java.util.LinkedHashSet<E>实现类并继承HashSet
     
     
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

java.util.Map<K,V>
     |
     |------ java.util.HashMap<K,V>实现类
     |
     |------ java.util.Hashtable<K,V>实现类
     |                       |子类
     |                       |------ java.util.Properties
     |
     |
     |--- java.util.SortedMap<K,V>子类
     |                  |子类
     |                  |-------- java.util.NavigableMap<K,V>
     |                  |                       |实现类
     |                  |                       |------- java.util.TreeMap<K,V>
     |
     |
     |--- java.util.concurrent.ConcurrentMap<K,V>子类
     |                  |实现类
     |                  |-------- java.util.concurrent.ConcurrentHashMap<K,V>
     
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


java.util.List : 
		1、有序的 collection 
		2、可以对列表中每个元素的插入位置进行精确地控制
		3、可以根据元素的索引访问元素，并搜索列表中的元素
		4、列表通常允许重复的元素
		5、允许存在 null 元素
		
		次序( sort ) 、位置( position )

	java.util.ArrayList<E> : List 接口的大小可变数组的实现
		
		1、ArrayList 内部基于 数组 存储 各个元素
		2、所谓大小可变数组，是指当 数组容量不足以存放新的元素时，创建新数组，并将原数组中的内容复制过来
		
对 集合 进行排序:
	按照自然顺序排序 : sort( List<T> list )
		   
		   自然顺序:  java.lang.Comparable<T>
		                  Comparable 接口强行对实现它的每个类的对象进行整体排序。
		                      这种排序被称为类的自然排序，类的 compareTo 方法被称为它的自然比较方法。
		                      
		                       public int compareTo( T o ) 
		                             如果该对象小于、等于或大于指定对象，则分别返回负整数、零或正整数
		   
	按照比较器进行排序: sort(List<T> list, Comparator<? super T> c) 
	
	       比较器:  java.util.Comparator<T> 
	                       强行对某个对象 collection 进行整体排序 的比较函数
	                       
	                       int	compare ( T o1 , T o2 )  比较用来排序的两个参数:
	                            根据第一个参数小于、等于或大于第二个参数分别返回负整数、零或正整数

java.util.Vector<E> 内部也是用数组存放元素

		与 ArrayList 不同的是 Vector 每次增长的容量是固定的，大部分方法都被 synchronized 关键字修饰
		
		Vector 是线程安全的

java.util.Stack<E> 表示堆栈

		栈的特点: 后进先出

java.util.LinkedList

      内部基于链表实现，增删快、迭代快，随机访问能力较差
      
       链表中的每个节点都是 LinkedList.Node 类型的对象:
       
           private static class Node<E> {
			        E item ; // 表示当前节点存放的数据
			        Node<E> next ; // 指向下一个节点的指针
			        Node<E> previous ; // 指向前一个节点的指针
			
			        Node( Node<E> previous, E element, Node<E> next) {
			            this.item = element;
			            this.next = next;
			            this.previous = previous;
			        }
		    }


java.util.Queue<E> 表示队列 
	
	队列的特点: 先进先出 ( FIFO , First In , First Out )
	
java.util.Deque<E> 表示双端队列


java.util.Map<K,V>

   特点:
	   1、将键映射到值的对象 ( Map 集合中存放的是 key-value 对 ( Map.Entry ) )
	   2、一个映射不能包含重复的键 ( Map 集合中的 key 不能重复 )
	   3、每个键最多只能映射到一个值 ( Map 集合中的 key 只能对应一个 值 )
   
   方法:
	   V	put( K key, V value ) : 将指定的值(value)与此映射中的指定键(key)关联
	   
	   V	get( Object key )  : 返回指定键所映射的值；如果此映射不包含该键的映射关系，则返回 null
	   
	   boolean	containsKey(Object key) 
	   
	   boolean	containsValue(Object value) 
	   
	   void	clear() 
	   boolean	isEmpty() 
	   int	size()
	   V	remove(Object key)
	   
	   void	putAll( Map<? extends K,? extends V> m )
	   
	   Set<K>	keySet()  返回所有的 key 组成的 Set 集合
	   Collection<V>	values() 返回所有的 value 组成的 Collection 集合
	   Set<Map.Entry<K,V>>	entrySet() 返回所有的 entry 对应的 Set 集合

java.util.HashMap<K,V> : 基于 哈希表 的 Map 接口的实现

         构造方法:
         	HashMap()
         	HashMap(Map<? extends K,? extends V> m) 
         	
         	HashMap( int initialCapacity ) 
         	
         	HashMap( int initialCapacity , float loadFactor ) 
         	
         			initialCapacity 用来确定 哈希表的 初始容量
         			loadFactor 加载因子用来确定 哈希表 什么时候扩容 (扩容时机) ( 这个数值是 [ 0 , 1 ] 之间的 小数 )

         哈希表: 根据元素可以确定其存放位置的数组
         
                   {  11 ,  22 , 33 , 44 , 55 , 66 }
                   
                   66
                   
                   element % 10 - 1 
                   
                   element / 10 - 1 

		存储: 内部用数组存放 键值对 ( Map.Entry )
		
			        根据 key.hashCode() 来重新计算 hash 值后，用 ( table.length - 1 ) & hash 来确定元素的存放位置
			        
			        static final int hash(Object key) {
				        int h;
				        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
				    }
				    
				 哈希表中的每个位置 称作 一个 "桶"
				 
				 每个"桶" 中可以存放多个 键值对 ，
				 当有多个键值对在同一个桶中时，哈希表直接存放的那个是一个 链表头节点 或 红黑树的根节点
				 
				 JDK 1.8 开始 每个痛 采用  链表 +  红黑树 来实现
				 
				 当每个桶中的 键值对个数 超过 8 个时，链表转成 树 (哈希表存放的是红黑树的根节点)
		  
		特点:
			1、key 允许为 null ， value 也允许为 null
			2、不保证映射的顺序，特别是它不保证该顺序恒久不变

		 static class Node<K,V> implements Map.Entry<K,V> {
		 
		 		final int hash;
		        final K key;
		        V value;
		        Node<K,V> next;
		
		        Node(int hash, K key, V value, Node<K,V> next) {
		            this.hash = hash;
		            this.key = key;
		            this.value = value;
		            this.next = next;
		        }
		 
		 		// .......
		 		
		 }
		 
		static final class TreeNode<K,V> extends LinkedHashMap.Entry<K,V> {
		        TreeNode<K,V> parent ;  // red-black tree links
		        TreeNode<K,V> left ;
		        TreeNode<K,V> right ;
		        TreeNode<K,V> previous ;    // needed to unlink next upon deletion
		        boolean red;
		        TreeNode(int hash, K key, V val, Node<K,V> next) {
		            super(hash, key, val, next);
		        }
		        
		        // .....
        
        }


java.util.Hashtable<K,V> : 实现一个哈希表，该哈希表将键映射到相应的值

		特点:
		1、几乎所有的方法都是线程安全的
		2、Hashtable 的 key 和 value 都不能为 null

java.util.Properties : 表示属性集
        Properties 可保存在流中或从流中加载。
          属性列表中每个键及其对应值都是一个字符串
          应该用 setProperty 和 getProperty 方法来 操作属性 ，而不是使用 put 和 get

java.util.TreeMap<K,V> : 基于红黑树（ Red-Black tree ）来实现 Map 集合 ( 同时实现了  NavigableMap 、SortedMap )

		该映射根据其键 ( key ) 的自然顺序进行排序，
		或者根据创建映射时提供的 Comparator 进行排序，
		具体取决于使用的构造方法
		
		特点:
		1、TreeMap 的 key 不可以为 null ，而 value 可以为 null
		2、TreeMap 中的键值对根据 键来排序 ( 根据自然顺序 或 比较器排序)

Set: 最接近数学中的 "集" 的概念

		一个 Set 的自我修养: 
		元素不重复 ( 必须通过元素的 equals 方法来判断是否存在重复元素 )
		

java.util.HashSet : 由 哈希表（实际上是一个 HashMap 实例）支持

				
				private transient HashMap<E,Object> map ;
				
				private static final Object PRESENT = new Object() ;

			    public boolean add(E e) {
			        return map.put( e , PRESENT ) == null ;
			    }

		HashSet 的特点:
		1、元素可以是 null 
		2、元素存放的位置 跟 添加顺序 无关 ( 元素存放的位置 跟 element.hashCode() 有关 )
		3、不支持排序

java.util.TreeSet : 基于 TreeMap 来实现 Set 接口 ( TreeMap 内部是基于 红黑树（ Red-Black tree ）实现 )

		特点:
		1、有顺序 ( 根据元素的自然顺序或比较器排序后存放元素)
		2、元素不可以是 null
		3、元素存放的位置 跟 添加顺序 无关


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

自己动手写一个 List 集合 

	  public  class  Container  implement  List<Object> {
	  
	  		private Object[]  elementData ;
	  		private float loadFactor ;
	  		
	  		public  Container( int  initialCapacity , float  loadFactor ) {
	  		
	  			// 应该检查 initialCapacity 是否属于 [ 0 , Integer.MAX_VALUE )
	  			
	  			// 应该检查 loadFactor 是否 属于 ( 0.0F , 1.0F )
	  			
	  			this.loadFactor = loadFactor ;
	  			this.elementData = new Object[ initialCapacity ] ;
	  		}
	  		
	  		public boolean add( Object o ){
	  		
	  			// 需要确保 elementData 数组足够存放新的元素
	  			
	  			elementData[ ? ] = o ;
	  			
	  			return true ;
	  		}
	  
	  
	  }







